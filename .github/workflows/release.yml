# 开发环境下的CI
name: Build & Publish

on:
  push:
    paths-ignore:
      - "docfx/**"
    branches: ["main", "fix/ci"]
  pull_request:
    branches: ["main", "fix/ci"]

jobs:
  setup:
    permissions:
      contents: write
    runs-on: ubuntu-latest
    outputs:
      git_commit: ${{ steps.envvars.outputs.GIT_COMMIT }}
      branch: ${{ steps.envvars.outputs.BRANCH }}
      github_sha_short: ${{ steps.envvars.outputs.GITHUB_SHA_SHORT }}
      date: ${{ steps.envvars.outputs.DATE }}
      version: ${{ steps.envvars.outputs.VERSION }}
      version_full: ${{ steps.envvars.outputs.VERSION_FULL }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Set Timezone
        uses: szenius/set-timezone@v1.2
        with:
          timezoneLinux: "Asia/Shanghai"
          timezoneMacos: "Asia/Shanghai"
          timezoneWindows: "China Standard Time"

      - name: Make Environment Variables
        id: envvars
        run: |
          DATE=$(date +"%Y.%m.%d")
          VERSION_MAJOR=1
          VERSION_MINOR=0
          VERSION_PATCH=0
          VERSION_COMMIT=$(git rev-list --count HEAD)
          echo "DATE=$DATE"
          echo "GITHUB_SHA_SHORT=${GITHUB_SHA::7}"
          echo "GIT_COMMIT=$VERSION_COMMIT"
          echo "BRANCH=${GITHUB_HEAD_REF:-${GITHUB_REF#refs/heads/}}"
          echo "VERSION=$VERSION_MAJOR.$VERSION_MINOR.$VERSION_PATCH"
          echo "VERSION_FULL=$VERSION_MAJOR.$VERSION_MINOR.$VERSION_PATCH.$VERSION_COMMIT"

          echo "GITHUB_SHA_SHORT=${GITHUB_SHA::7}" >> $GITHUB_OUTPUT
          echo "GIT_COMMIT=$COMMIT_VERSION" >> $GITHUB_OUTPUT
          echo "BRANCH=${GITHUB_HEAD_REF:-${GITHUB_REF#refs/heads/}}" >> $GITHUB_OUTPUT
          echo "DATE=$DATE" >> $GITHUB_OUTPUT
          echo "VERSION=$VERSION_MAJOR.$VERSION_MINOR.$VERSION_PATCH" >> $GITHUB_OUTPUT
          echo "VERSION_FULL=$VERSION_MAJOR.$VERSION_MINOR.$VERSION_PATCH.$VERSION_COMMIT" >> $GITHUB_OUTPUT

  build_windows:
    needs: setup
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4
      - name: Install .NET Core
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: "9.0.x"
      - name: Make directories
        run: |
          mkdir -p ./build/rift
      - name: Build Rift
        shell: pwsh
        run: |
          $VERSION="${{ needs.setup.outputs.version_full }}"
          dotnet publish src/Rift/Rift.csproj -f net9.0 --no-self-contained -c Release --output ./build/rift/bin -p:Version=$VERSION
          dotnet publish Plugins/Rift.Go/src/Rift.Go.csproj -f net9.0 -r win-x64 --no-self-contained -c Release --output ./build/rift/plugins/rift.go/${{ needs.setup.outputs.version }}/lib -p:Version=$VERSION
          dotnet publish Plugins/Rift.Generate/src/Rift.Generate.csproj -f net9.0 -r win-x64 --no-self-contained -c Release --output ./build/rift/plugins/rift.generate/${{ needs.setup.outputs.version }}/lib -p:Version=$VERSION
      - name: Copy Assets
        shell: pwsh
        run: |
          $PLUGIN_VERSION="${{ needs.setup.outputs.version }}"
          Copy-Item -Path Plugins/Rift.Generate/.assets/$PLUGIN_VERSION -Destination ~/.rift/plugins/rift.generate -Recurse -Force
      - name: Zip Package
        shell: pwsh
        run: |
          pushd ./build/rift
          zip -qq -r ../../rift-${{ needs.setup.outputs.version }}-windows-${{ needs.setup.outputs.branch }}-${{ needs.setup.outputs.github_sha_short }}.zip *
          popd
      - name: Upload package
        if: ${{ github.event_name == 'push' && ( github.ref == 'refs/heads/main' ) }}
        uses: actions/upload-artifact@v3
        with:
          name: rift-${{ needs.setup.outputs.version }}-windows-${{ needs.setup.outputs.branch }}-${{ needs.setup.outputs.github_sha_short }}.zip
          path: '.'
  build_linux:
    needs: setup
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Install .NET Core
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: "9.0.x"
      - name: Make directories
        run: |
          mkdir -p ./build/rift
      - name: Build Rift
        run: |
          VERSION="${{ needs.setup.outputs.version_full }}"
          dotnet publish src/Rift/Rift.csproj -f net9.0 --no-self-contained -c Release --output ./build/rift/bin -p:Version=$VERSION
          dotnet publish Plugins/Rift.Go/src/Rift.Go.csproj -f net9.0 -r linux-x64 --no-self-contained -c Release --output ./build/rift/plugins/rift.go/${{ needs.setup.outputs.version }}/lib -p:Version=$VERSION
          dotnet publish Plugins/Rift.Generate/src/Rift.Generate.csproj -f net9.0 -r linux-x64 --no-self-contained -c Release --output ./build/rift/plugins/rift.generate/${{ needs.setup.outputs.version }}/lib -p:Version=$VERSION
      - name: Copy Assets
        run: |
          PLUGIN_VERSION="${{ needs.setup.outputs.version }}"
          cp -r Plugins/Rift.Generate/.assets/$PLUGIN_VERSION ~/.rift/plugins/rift.generate
      - name: Zip Package
        run: |
          pushd ./build/rift
          zip -qq -r ../../rift-${{ needs.setup.outputs.version }}-linux-${{ needs.setup.outputs.branch }}-${{ needs.setup.outputs.github_sha_short }}.zip *
          popd
      - name: Upload package
        if: ${{ github.event_name == 'push' && ( github.ref == 'refs/heads/main' ) }}
        uses: actions/upload-artifact@v3
        with:
          name: rift-${{ needs.setup.outputs.version }}-linux-${{ needs.setup.outputs.branch }}-${{ needs.setup.outputs.github_sha_short }}.zip
  upload:
    # if: ${{ github.event_name == 'push' && ( github.ref == 'refs/heads/main' ) }}
    # needs: ["setup", "build"]
    permissions:
      contents: write
    runs-on: ubuntu-latest
    steps:
      - uses: actions/download-artifact@v3
        with:
          name: rift-${{ needs.setup.outputs.version }}-windows-${{ needs.setup.outputs.branch }}-${{ needs.setup.outputs.github_sha_short }}.zip
      - uses: actions/download-artifact@v3
        with:
          name: rift-${{ needs.setup.outputs.version }}-linux-${{ needs.setup.outputs.branch }}-${{ needs.setup.outputs.github_sha_short }}.zip
      - name: List files
        run: |
          ls -al
      # - name: Release
      #   id: release
      #   uses: softprops/action-gh-release@v1
      #   with:
      #     tag_name: ${{ needs.setup.outputs.version_full }}
      #     files: |
      #       rift-${{ needs.setup.outputs.version }}-${{ needs.setup.outputs.branch }}-${{ needs.setup.outputs.github_sha_short }}.zip